<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arithmetica</name>
    </assembly>
    <members>
        <member name="T:Arithmetica.ArrayDimensionHelpers">
            <summary>
            Class TensorDimensionHelpers.
            </summary>
        </member>
        <member name="M:Arithmetica.ArrayDimensionHelpers.ElementCount(System.Int64[])">
            <summary>
            Elements the count.
            </summary>
            <param name="sizes">The sizes.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Arithmetica.ArrayDimensionHelpers.GetStorageSize(System.Int64[],System.Int64[])">
            <summary>
            Gets the size of the storage.
            </summary>
            <param name="sizes">The sizes.</param>
            <param name="strides">The strides.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Arithmetica.ArrayDimensionHelpers.GetContiguousStride(System.Int64[])">
            <summary>
            Gets the contiguous stride.
            </summary>
            <param name="dims">The dims.</param>
            <returns>System.Int64[].</returns>
        </member>
        <member name="T:Arithmetica.ArrayFormatting">
            <summary>
            Class TensorFormatting.
            </summary>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.RepeatChar(System.Char,System.Int32)">
            <summary>
            Repeats the character.
            </summary>
            <param name="c">The c.</param>
            <param name="count">The count.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.GetIntFormat(System.Int32)">
            <summary>
            Gets the int format.
            </summary>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.GetFloatFormat(System.Int32)">
            <summary>
            Gets the float format.
            </summary>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.GetScientificFormat(System.Int32)">
            <summary>
            Gets the scientific format.
            </summary>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.IsIntOnly(Arithmetica.Storage,Arithmetica.ArithArray)">
            <summary>
            Determines whether [is int only] [the specified storage].
            </summary>
            <param name="storage">The storage.</param>
            <param name="array">The array.</param>
            <returns><c>true</c> if [is int only] [the specified storage]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.AbsMinMax(Arithmetica.Storage,Arithmetica.ArithArray)">
            <summary>
            Abses the minimum maximum.
            </summary>
            <param name="storage">The storage.</param>
            <param name="array">The array.</param>
            <returns>Tuple&lt;System.Double, System.Double&gt;.</returns>
        </member>
        <member name="T:Arithmetica.ArrayFormatting.FormatType">
            <summary>
            Enum FormatType
            </summary>
        </member>
        <member name="F:Arithmetica.ArrayFormatting.FormatType.Int">
            <summary>
            The int
            </summary>
        </member>
        <member name="F:Arithmetica.ArrayFormatting.FormatType.Scientific">
            <summary>
            The scientific
            </summary>
        </member>
        <member name="F:Arithmetica.ArrayFormatting.FormatType.Float">
            <summary>
            The float
            </summary>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.GetFormatSize(System.Tuple{System.Double,System.Double},System.Boolean)">
            <summary>
            Gets the size of the format.
            </summary>
            <param name="minMax">The minimum maximum.</param>
            <param name="intMode">if set to <c>true</c> [int mode].</param>
            <returns>Tuple&lt;FormatType, System.Double, System.Int32&gt;.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.BuildFormatString(Arithmetica.ArrayFormatting.FormatType,System.Int32)">
            <summary>
            Builds the format string.
            </summary>
            <param name="type">The type.</param>
            <param name="size">The size.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid format type " + type</exception>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.GetStorageFormat(Arithmetica.Storage,Arithmetica.ArithArray)">
            <summary>
            Gets the storage format.
            </summary>
            <param name="storage">The storage.</param>
            <param name="array">The array.</param>
            <returns>Tuple&lt;System.String, System.Double, System.Int32&gt;.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.FormatTensorTypeAndSize(Arithmetica.ArithArray)">
            <summary>
            Formats the size of the array type and.
            </summary>
            <param name="array">The array.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.FormatVector(System.Text.StringBuilder,Arithmetica.ArithArray)">
            <summary>
            Formats the vector.
            </summary>
            <param name="builder">The builder.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.FormatMatrix(System.Text.StringBuilder,Arithmetica.ArithArray,System.String)">
            <summary>
            Formats the matrix.
            </summary>
            <param name="builder">The builder.</param>
            <param name="array">The array.</param>
            <param name="indent">The indent.</param>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.FormatTensor(System.Text.StringBuilder,Arithmetica.ArithArray)">
            <summary>
            Formats the array.
            </summary>
            <param name="builder">The builder.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Arithmetica.ArrayFormatting.Format(Arithmetica.ArithArray)">
            <summary>
            Formats the specified array.
            </summary>
            <param name="array">The array.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Arithmetica.ArrayImageExtensions">
            <summary>
            Class TensorImageExtensions.
            </summary>
        </member>
        <member name="M:Arithmetica.ArrayImageExtensions.ToBitmap(Arithmetica.ArithArray)">
            <summary>
            Converts a ArithArray to a Bitmap. Elements of the array are assumed to be normalized in the range [0, 1]
            The array must have one of the following structures:
            * 2D array - output is a 24bit BGR bitmap in greyscale
            * 3D array where first dimension has length 1 - output is 24bit BGR bitmap in greyscale
            * 3D array where first dimension has length 3 - output is 24bit BGR bitmap
            * 3D array where first dimension has length 4 - output is 32bit BGRA bitmap
            2D tensors must be in HW (height x width) order;
            3D tensors must be in CHW (channel x height x width) order.
            </summary>
            <param name="array">The array.</param>
            <returns>Bitmap.</returns>
            <exception cref="T:System.InvalidOperationException">
            array must have 2 or 3 dimensions
            or
            3D array's first dimension (color channels) must be of length 1, 3 or 4
            </exception>
        </member>
        <member name="T:Arithmetica.ArraySerialization">
            <summary>
            Class TensorSerialization.
            </summary>
        </member>
        <member name="M:Arithmetica.ArraySerialization.Serialize(Arithmetica.ArithArray,System.IO.Stream)">
            <summary>
            Serializes the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Arithmetica.ArraySerialization.Deserialize(Arithmetica.IAllocator,System.IO.Stream)">
            <summary>
            Deserializes the specified allocator.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="stream">The stream.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArraySerialization.WriteBytes(System.IO.BinaryWriter,Arithmetica.Storage,System.Int64,System.Int64)">
            <summary>
            Writes the bytes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="storage">The storage.</param>
            <param name="startIndex">The start index.</param>
            <param name="byteCount">The byte count.</param>
        </member>
        <member name="M:Arithmetica.ArraySerialization.ReadBytes(System.IO.BinaryReader,Arithmetica.Storage,System.Int64,System.Int64)">
            <summary>
            Reads the bytes.
            </summary>
            <param name="reader">The reader.</param>
            <param name="storage">The storage.</param>
            <param name="startIndex">The start index.</param>
            <param name="byteCount">The byte count.</param>
        </member>
        <member name="T:Arithmetica.ArrayOps">
            <summary>
            Class TOps.
            </summary>
        </member>
        <member name="M:Arithmetica.ArrayOps.NewContiguous(Arithmetica.ArithArray)">
            <summary>
            Creates new contiguous.
            </summary>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.AsContiguous(Arithmetica.ArithArray)">
            <summary>
            Ases the contiguous.
            </summary>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Concat(System.Int32,Arithmetica.ArithArray[])">
            <summary>
            Concats the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="dimension">The dimension.</param>
            <param name="inputs">The inputs.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.FillOneHot(Arithmetica.ArithArray,System.Int32,System.Int32[])">
            <summary>
            Fills the one hot.
            </summary>
            <param name="result">The result.</param>
            <param name="labelCount">The label count.</param>
            <param name="labels">The labels.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Arithmetica.ArrayOps.DoFillOneHot(Arithmetica.ArithArray,System.Int32,System.Int32[])" -->
        <member name="M:Arithmetica.ArrayOps.Copy(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Copies the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.Fill(Arithmetica.ArithArray,System.Single)">
            <summary>
            Fills the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.Dot(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Dots the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Addmm(System.Single,Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Addmms the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="beta">The beta.</param>
            <param name="src">The source.</param>
            <param name="alpha">The alpha.</param>
            <param name="m1">The m1.</param>
            <param name="m2">The m2.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Abs(Arithmetica.ArithArray)">
            <summary>
            Abses the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Neg(Arithmetica.ArithArray)">
            <summary>
            Negs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sign(Arithmetica.ArithArray)">
            <summary>
            Signs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sqrt(Arithmetica.ArithArray)">
            <summary>
            SQRTs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Exp(Arithmetica.ArithArray)">
            <summary>
            Exps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Log(Arithmetica.ArithArray)">
            <summary>
            Logs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Log1p(Arithmetica.ArithArray)">
            <summary>
            Log1ps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Floor(Arithmetica.ArithArray)">
            <summary>
            Floors the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Ceil(Arithmetica.ArithArray)">
            <summary>
            Ceils the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Round(Arithmetica.ArithArray)">
            <summary>
            Rounds the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Trunc(Arithmetica.ArithArray)">
            <summary>
            Truncs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Frac(Arithmetica.ArithArray)">
            <summary>
            Fracs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sin(Arithmetica.ArithArray)">
            <summary>
            Sins the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Cos(Arithmetica.ArithArray)">
            <summary>
            Coses the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Tan(Arithmetica.ArithArray)">
            <summary>
            Tans the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Asin(Arithmetica.ArithArray)">
            <summary>
            Asins the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Acos(Arithmetica.ArithArray)">
            <summary>
            Acoses the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Atan(Arithmetica.ArithArray)">
            <summary>
            Atans the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sinh(Arithmetica.ArithArray)">
            <summary>
            Sinhes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Cosh(Arithmetica.ArithArray)">
            <summary>
            Coshes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Tanh(Arithmetica.ArithArray)">
            <summary>
            Tanhes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sigmoid(Arithmetica.ArithArray)">
            <summary>
            Sigmoids the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Atan2(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Atan2s the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="srcY">The source y.</param>
            <param name="srcX">The source x.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Pow(Arithmetica.ArithArray,System.Single)">
            <summary>
            Pows the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Square(Arithmetica.ArithArray)">
            <summary>
            Squares the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Tpow(System.Single,Arithmetica.ArithArray)">
            <summary>
            Tpows the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Lerp(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Lerps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="srcA">The source a.</param>
            <param name="srcB">The source b.</param>
            <param name="weight">The weight.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Clip(Arithmetica.ArithArray,System.Single,System.Single)">
            <summary>
            Clamps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Add(Arithmetica.ArithArray,System.Single)">
            <summary>
            Adds the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sub(Arithmetica.ArithArray,System.Single)">
            <summary>
            Subs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sub(System.Single,Arithmetica.ArithArray)">
            <summary>
            Subs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Mul(Arithmetica.ArithArray,System.Single)">
            <summary>
            Muls the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Div(Arithmetica.ArithArray,System.Single)">
            <summary>
            Divs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Div(System.Single,Arithmetica.ArithArray)">
            <summary>
            Divs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Mod(Arithmetica.ArithArray,System.Single)">
            <summary>
            Mods the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.GreaterThan(Arithmetica.ArithArray,System.Single)">
            <summary>
            Greaters the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.LessThan(Arithmetica.ArithArray,System.Single)">
            <summary>
            Lesses the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.GreaterOrEqual(Arithmetica.ArithArray,System.Single)">
            <summary>
            Greaters the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.LessOrEqual(Arithmetica.ArithArray,System.Single)">
            <summary>
            Lesses the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.EqualTo(Arithmetica.ArithArray,System.Single)">
            <summary>
            Equals to.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.NotEqual(Arithmetica.ArithArray,System.Single)">
            <summary>
            Nots the equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Add(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Adds the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sub(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Subs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Mul(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Muls the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Div(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Divs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Mod(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Mods the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.GreaterThan(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Greaters the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.LessThan(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Lesses the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.GreaterOrEqual(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Greaters the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.LessOrEqual(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Lesses the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.EqualTo(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Equals to.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.NotEqual(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Nots the equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sum(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Sums the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Prod(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Products the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Min(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Max(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Determines the maximun of the parameters.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Argmin(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Argmins the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Argmax(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Argmaxes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Mean(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Means the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Norm(Arithmetica.ArithArray,System.Int32,System.Single)">
            <summary>
            Norms the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Std(Arithmetica.ArithArray,System.Int32,System.Boolean)">
            <summary>
            Standards the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="normByN">if set to <c>true</c> [norm by n].</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Var(Arithmetica.ArithArray,System.Int32,System.Boolean)">
            <summary>
            Variables the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="normByN">if set to <c>true</c> [norm by n].</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Sum(Arithmetica.ArithArray)">
            <summary>
            Sums all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Prod(Arithmetica.ArithArray)">
            <summary>
            Products all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Min(Arithmetica.ArithArray)">
            <summary>
            Minimums all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Max(Arithmetica.ArithArray)">
            <summary>
            Maximums all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Mean(Arithmetica.ArithArray)">
            <summary>
            Means all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Norm(Arithmetica.ArithArray,System.Single)">
            <summary>
            Norms all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Std(Arithmetica.ArithArray)">
            <summary>
            Standards all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Var(Arithmetica.ArithArray)">
            <summary>
            Variables all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.SumF(Arithmetica.ArithArray)">
            <summary>
            Sums all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.ProdF(Arithmetica.ArithArray)">
            <summary>
            Products all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.MinF(Arithmetica.ArithArray)">
            <summary>
            Minimums all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.MaxF(Arithmetica.ArithArray)">
            <summary>
            Maximums all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.MeanF(Arithmetica.ArithArray)">
            <summary>
            Means all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.VarF(Arithmetica.ArithArray)">
            <summary>
            Variables all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.StdF(Arithmetica.ArithArray)">
            <summary>
            Standards all.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.NormF(Arithmetica.ArithArray,System.Single)">
            <summary>
            Norms all.
            </summary>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.IndexSelect(Arithmetica.ArithArray,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Indexes the select.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Gather(Arithmetica.ArithArray,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Gathers the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.Scatter(Arithmetica.ArithArray,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Scatters the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.ScatterFill(System.Single,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Scatters the fill.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.GetSeed(Arithmetica.SeedSource)">
            <summary>
            Gets the seed.
            </summary>
            <param name="src">The source.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomUniform(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single,System.Single)">
            <summary>
            Randoms the uniform.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomNormal(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single,System.Single)">
            <summary>
            Randoms the normal.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="mean">The mean.</param>
            <param name="stdv">The STDV.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomExponential(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single)">
            <summary>
            Randoms the exponential.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="lambda">The lambda.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomCauchy(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single,System.Single)">
            <summary>
            Randoms the cauchy.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="median">The median.</param>
            <param name="sigma">The sigma.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomLogNormal(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single,System.Single)">
            <summary>
            Randoms the log normal.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="mean">The mean.</param>
            <param name="stdv">The STDV.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomGeometric(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single)">
            <summary>
            Randoms the geometric.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:Arithmetica.ArrayOps.RandomBernoulli(Arithmetica.ArithArray,Arithmetica.SeedSource,System.Single)">
            <summary>
            Randoms the bernoulli.
            </summary>
            <param name="result">The result.</param>
            <param name="seedSource">The seed source.</param>
            <param name="p">The p.</param>
        </member>
        <member name="T:Arithmetica.ArithArray">
            <summary>
            Arith Array is a base tensor for the Arithmetica. 
            It's a multi dimensional array with implementation with basic arithmetics, trignometric, hyperbolic, rounding, 
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Arithmetica.ArithArray.shape">
            <summary>
            The sizes
            </summary>
        </member>
        <member name="F:Arithmetica.ArithArray.strides">
            <summary>
            The strides
            </summary>
        </member>
        <member name="F:Arithmetica.ArithArray.storage">
            <summary>
            The storage
            </summary>
        </member>
        <member name="F:Arithmetica.ArithArray.storageOffset">
            <summary>
            The storage offset
            </summary>
        </member>
        <member name="F:Arithmetica.ArithArray.isDisposed">
            <summary>
            The is disposed
            </summary>
        </member>
        <member name="M:Arithmetica.ArithArray.#ctor(System.Int64[],Arithmetica.DType)">
            <summary>
            Construct a new array, using the given allocator to construct a storage. The new array
            will be contiguous in memory. The array's elements will not be initialized.
            </summary>
            <param name="allocator"></param>
            <param name="elementType"></param>
            <param name="sizes"></param>
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArithArray"/> class.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="elementType">Type of the element.</param>
            <param name="sizes">The sizes.</param>
        </member>
        <member name="M:Arithmetica.ArithArray.#ctor(System.Int64[],System.Int64[],Arithmetica.DType)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArithArray"/> class.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="elementType">Type of the element.</param>
            <param name="sizes">The sizes.</param>
            <param name="strides">The strides.</param>
        </member>
        <member name="M:Arithmetica.ArithArray.#ctor(System.Int64[],System.Int64[],Arithmetica.Storage,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArithArray"/> class.
            </summary>
            <param name="sizes">The sizes.</param>
            <param name="strides">The strides.</param>
            <param name="storage">The storage.</param>
            <param name="storageOffset">The storage offset.</param>
        </member>
        <member name="M:Arithmetica.ArithArray.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ArithArray</exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:Arithmetica.ArithArray.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Arithmetica.ArithArray.Shape">
            <summary>
            Gets the sizes.
            </summary>
            <value>The sizes.</value>
        </member>
        <member name="P:Arithmetica.ArithArray.Strides">
            <summary>
            Gets the strides.
            </summary>
            <value>The strides.</value>
        </member>
        <member name="P:Arithmetica.ArithArray.Storage">
            <summary>
            Gets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="P:Arithmetica.ArithArray.StorageOffset">
            <summary>
            Gets the storage offset.
            </summary>
            <value>The storage offset.</value>
        </member>
        <member name="P:Arithmetica.ArithArray.Allocator">
            <summary>
            Gets the allocator.
            </summary>
            <value>The allocator.</value>
        </member>
        <member name="P:Arithmetica.ArithArray.DimensionCount">
            <summary>
            Gets the dimension count.
            </summary>
            <value>The dimension count.</value>
        </member>
        <member name="M:Arithmetica.ArithArray.CopyRef">
            <summary>
            Returns a new ArithArray object which points to the same storage as this,
            incrementing the refcount of the storage object.
            </summary>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.Format">
            <summary>
            Formats this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="F:Arithmetica.ArithArray.elementCount">
            <summary>
            The element count
            </summary>
        </member>
        <member name="M:Arithmetica.ArithArray.ElementCount">
            <summary>
            Elements the count.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.IsContiguous">
            <summary>
            Determines whether this instance is contiguous.
            </summary>
            <returns><c>true</c> if this instance is contiguous; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.IsSameSizeAs(Arithmetica.ArithArray)">
            <summary>
            Determines whether [is same size as] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is same size as] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.GetElementAsFloat(System.Int64[])">
            <summary>
            Note: this does not check whether indices are in range
            </summary>
            <param name="indices">The indices.</param>
            <returns>System.Single.</returns>
            <exception cref="T:System.ArgumentException">
            Number of indices must equal number of array dimensions
            or
            Index " + i + " with value " + indices[i] + " is out of range
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.SetElementAsFloat(System.Single,System.Int64[])">
            <summary>
            Note: this does not check whether indices are in range
            </summary>
            <param name="value">The value.</param>
            <param name="indices">The indices.</param>
            <exception cref="T:System.ArgumentException">
            Number of indices must equal number of array dimensions
            or
            Index " + i + " with value " + indices[i] + " is out of range
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.View(System.Int64[])">
            <summary>
            Views the specified sizes.
            </summary>
            <param name="sizes">The sizes.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">
            Cannot use View on a non-contiguous tensor000
            or
            Output array must have the same number of elements as the input
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Narrow(System.Int32,System.Int64,System.Int64)">
            <summary>
            Narrows the specified dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="startIndex">The start index.</param>
            <param name="size">The size.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            dimension
            or
            startIndex
            or
            size
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Select(System.Int32,System.Int64)">
            <summary>
            Selects the specified dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="index">The index.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">Select requires 2 or more dimensions</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            dimension
            or
            index
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.IntTranspose">
            <summary>
            Transposes this instance without NewContiguous.
            </summary>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">Parameterless Transpose is only valid on 2d tensors</exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Transpose(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Transposes the specified dimension1.
            </summary>
            <param name="dimension1">The dimension1.</param>
            <param name="dimension2">The dimension2.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            dimension1
            or
            dimension2
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Transpose(System.Int32[])">
            <summary>
            Permutes the specified dims.
            </summary>
            <param name="dims">The dims.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">The number of permutation indices must equal the number of array dimensions</exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Expand(System.Int64[])">
            <summary>
            Expand one or more singleton dimensions (dimensions with size 1) by using a stride of 0
            </summary>
            <param name="newSizes">The new sizes.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">
            number of elements of newSizes must match the dimension count of array
            or
            Can only expand singleton dimensions (dimensions of size 1)
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Squeeze">
            <summary>
            Return a new array where **all** singleton dimensions have been removed
            </summary>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.Squeeze(System.Int32)">
            <summary>
            Return a new array where the given singleton dimension has been removed
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">Squeeze requires 2 or more dimensions</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dimension</exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Unfold(System.Int32,System.Int64,System.Int64)">
            <summary>
            Returns a array which contains all slices of size size in the given dimension. The step between two slices is given by step.
            The result array has an additional dimension of size size.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="size">The size.</param>
            <param name="step">The step.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot unfold an empty array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            dimension is out of range - dimension
            or
            size cannot be larger than the size of dimension - size
            or
            step must be at least 1 - step
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Pad1Prepend(System.Int64[],System.Int32)">
            <summary>
            Pad1s the prepend.
            </summary>
            <param name="array">The array.</param>
            <param name="newSize">The new size.</param>
            <returns>System.Int64[].</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.PadToDimCount(System.Int32)">
            <summary>
            Prepend singleton dimensions until DimensionCount equals newDimCount. Pads to dim count.
            </summary>
            <param name="newDimCount">The new dim count.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.RepeatTensor(System.Int64[])">
            <summary>
            Repeats the array along the dimension.
            </summary>
            <param name="repetitions">The repetitions.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">
            repetitions must be at least the same length as the number of array dimensions
            or
            All dimensions must be repeated at least once
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.LoadFrom(System.Array)">
            <summary>
            Copies from.
            </summary>
            <param name="array">The array.</param>
            <exception cref="T:System.InvalidOperationException">
            ArithArray must be contiguous to copy from CLR array
            or
            ArithArray and array must have the same number of elements
            or
            ArithArray and array must have the same element types
            </exception>
        </member>
        <member name="M:Arithmetica.ArithArray.FromArray(Arithmetica.IAllocator,System.Array)">
            <summary>
            Froms the array.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="array">The array.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.ArraySwap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Arrays the swap.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="index1">The index1.</param>
            <param name="index2">The index2.</param>
        </member>
        <member name="M:Arithmetica.ArithArray.ArrayRemove``1(``0[],System.Int64)">
            <summary>
            Arrays the remove.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:Arithmetica.ArithArray.SwapsForPermutation(System.Int32[])">
            <summary>
            Swapses for permutation.
            </summary>
            <param name="perm">The perm.</param>
            <returns>IEnumerable&lt;Tuple&lt;System.Int32, System.Int32&gt;&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid permutation</exception>
        </member>
        <member name="M:Arithmetica.ArithArray.Serialize(System.IO.Stream)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Arithmetica.ArithArray.Deserialize(Arithmetica.IAllocator,System.IO.Stream)">
            <summary>
            Deserializes the specified allocator.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="stream">The stream.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.AM.Dot(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Performs the dot product between 2 array.
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The second array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Addmm(System.Single,Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>The addmm function is an optimized version of the equation beta*mat + alpha*(mat1 @ mat2)</summary>
            <param name="beta">The beta value.</param>
            <param name="src">The source array.</param>
            <param name="alpha">The alpha value.</param>
            <param name="m1">The first 2D array.</param>
            <param name="m2">The second 2D array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Add(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise add operation between two array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The second array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Add(Arithmetica.ArithArray,System.Single)">
            <summary>
            Performs elementwise add operation between array and scalar
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Add(System.Single,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise add operation between scalar and array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Sub(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise subtract operation between two array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The second array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Sub(Arithmetica.ArithArray,System.Single)">
            <summary>
            Performs elementwise subtract operation between array and scalar
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Sub(System.Single,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise subtract operation between scalar and array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Mul(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise multiplication operation between two array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The second array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Mul(Arithmetica.ArithArray,System.Single)">
            <summary>
            Performs elementwise multiplication operation between array and scalar
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Mul(System.Single,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise multiplication operation between scalar and array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Div(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise divide operation between two array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The second array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Div(Arithmetica.ArithArray,System.Single)">
            <summary>
            Performs elementwise divide operation between array and scalar
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Div(System.Single,Arithmetica.ArithArray)">
            <summary>
            Performs elementwise divide operation between scalar and array
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Mod(Arithmetica.ArithArray,System.Single)">
            <summary>
            Performs elementwise divide modulus for the first array against a scalar value
            </summary>
            <param name="lhs">The first array.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Neg(Arithmetica.ArithArray)">
            <summary>
            Negates the specified array.
            </summary>
            <param name="src">The source array.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.Abs(Arithmetica.ArithArray)">
            <summary>
            Finds the elementwise absolute value of the array
            </summary>
            <param name="src">The source array.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Arithmetica.AM.Sign(Arithmetica.ArithArray)" -->
        <member name="M:Arithmetica.AM.Lerp(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Finds the linear interpolation is a method of curve fitting using linear polynomials to construct new data points within the range of a discrete set of known data points.
            </summary>
            <param name="a">The first array</param>
            <param name="b">The second array.</param>
            <param name="weight">The weight.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.AM.GreaterThan(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Performs lhs > rhs elemenwise.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns></returns>
        </member>
        <member name="T:Arithmetica.Core.ArrayConcat">
            <summary>
            Class ArithArray Concatenation.
            </summary>
        </member>
        <member name="M:Arithmetica.Core.ArrayConcat.Concat(Arithmetica.ArithArray,System.Int32,Arithmetica.ArithArray[])">
            <summary>
            Concats the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="dimension">The dimension.</param>
            <param name="inputs">The inputs.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.ArgumentException">Concat: at least two tensors required - inputs</exception>
        </member>
        <member name="M:Arithmetica.Core.ArrayConcat.GetDimSize(Arithmetica.ArithArray,System.Int32)">
            <summary>
            Gets the size of the dim.
            </summary>
            <param name="Array">The Array.</param>
            <param name="dim">The dim.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Arithmetica.Core.ArrayConcat.ConcatTensorSize(System.Int32,System.Int32,Arithmetica.ArithArray[])">
            <summary>
            Concats the size of the Array.
            </summary>
            <param name="ndim">The ndim.</param>
            <param name="dimension">The dimension.</param>
            <param name="tensors">The tensors.</param>
            <returns>System.Int64[].</returns>
            <exception cref="T:System.InvalidOperationException">Inconsistent Array sizes</exception>
        </member>
        <member name="T:Arithmetica.Core.ArrayResultBuilder">
            <summary>
            Class TensorResultBuilder.
            </summary>
        </member>
        <member name="M:Arithmetica.Core.ArrayResultBuilder.GetWriteTarget(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Boolean,System.Int64[])">
            <summary>
            Gets the write target.
            </summary>
            <param name="maybeResult">The maybe result.</param>
            <param name="newTemplate">The new template.</param>
            <param name="requireContiguous">if set to <c>true</c> [require contiguous].</param>
            <param name="requiredSizes">The required sizes.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.Core.ArrayResultBuilder.GetWriteTarget(Arithmetica.ArithArray,Arithmetica.IAllocator,Arithmetica.DType,System.Boolean,System.Int64[])">
            <summary>
            Gets the write target.
            </summary>
            <param name="maybeResult">The maybe result.</param>
            <param name="allocatorForNew">The allocator for new.</param>
            <param name="elementTypeForNew">The element type for new.</param>
            <param name="requireContiguous">if set to <c>true</c> [require contiguous].</param>
            <param name="requiredSizes">The required sizes.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Arithmetica.Core.ArrayResultBuilder.MatchesRequirements(Arithmetica.ArithArray,System.Boolean,System.Int64[])">
            <summary>
            Matcheses the requirements.
            </summary>
            <param name="array">The array.</param>
            <param name="requireContiguous">if set to <c>true</c> [require contiguous].</param>
            <param name="requiredSizes">The required sizes.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Arithmetica.Core.ArrayResultBuilder.ArrayEqual``1(``0[],``0[])">
            <summary>
            Arrays the equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Arithmetica.Core.ArrayResultBuilder.ArrayEqualExcept``1(``0[],``0[],System.Int32)">
            <summary>
            Arrays the equal except.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="ignoreIndex">Index of the ignore.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Arithmetica.Core.DelegateDisposable">
            <summary>
            Delegate Disposable class
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Arithmetica.Core.DelegateDisposable.action">
            <summary>
            The action
            </summary>
        </member>
        <member name="M:Arithmetica.Core.DelegateDisposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Core.DelegateDisposable"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Arithmetica.Core.DelegateDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Arithmetica.Core.MemoryCopier">
            <summary>
            Class with efficient memory copy methods
            </summary>
        </member>
        <member name="T:Arithmetica.Core.MemoryCopier.NativeMethods32">
            <summary>
            Native Methods 32.
            </summary>
        </member>
        <member name="M:Arithmetica.Core.MemoryCopier.NativeMethods32.RtlCopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            RTLs the copy memory.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
        </member>
        <member name="T:Arithmetica.Core.MemoryCopier.NativeMethods64">
            <summary>
            Native Methods 64.
            </summary>
        </member>
        <member name="M:Arithmetica.Core.MemoryCopier.NativeMethods64.RtlCopyMemory(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            RTLs the copy memory.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Arithmetica.Core.MemoryCopier.Copy(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            Copies data from source to destination.
            </summary>
            <param name="destination">The destination memory pointer.</param>
            <param name="source">The source memory pointer.</param>
            <param name="length">The length of data.</param>
        </member>
        <member name="T:Arithmetica.Cpu.CpuAllocator">
            <summary>
            Class CpuAllocator.
            Implements the <see cref="T:Arithmetica.IAllocator" />
            </summary>
            <seealso cref="T:Arithmetica.IAllocator" />
        </member>
        <member name="M:Arithmetica.Cpu.CpuAllocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Cpu.CpuAllocator"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuAllocator.Allocate(Arithmetica.DType,System.Int64)">
            <summary>
            Allocates the specified element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elementCount">The element count.</param>
            <returns>Storage.</returns>
        </member>
        <member name="T:Arithmetica.Cpu.CpuBasicOps">
            <summary>
            Class CpuBasicOps.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Cpu.CpuBasicOps"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Dot(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Dots the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Addmm(Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Addmms the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="beta">The beta.</param>
            <param name="src">The source.</param>
            <param name="alpha">The alpha.</param>
            <param name="m1">The m1.</param>
            <param name="m2">The m2.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">
            All tensors must have the same element type
            or
            Size mismatch
            </exception>
            <exception cref="T:System.ArgumentException">
            result must be a CPU Array - result
            or
            m1 must be a CPU Array - m1
            or
            m2 must be a CPU Array - m2
            or
            src must be a matrix - src
            or
            m1 must be a matrix - m1
            or
            m2 must be a matrix - m2
            </exception>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.abs_func">
            <summary>
            The abs function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Abs(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Abses the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.neg_func">
            <summary>
            The neg function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Neg(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Negs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sign_func">
            <summary>
            The sign function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sign(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Signs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sqrt_func">
            <summary>
            The SQRT function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sqrt(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            SQRTs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.exp_func">
            <summary>
            The exp function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Exp(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Exps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.log_func">
            <summary>
            The log function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Log(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Logs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.log1p_func">
            <summary>
            The log1p function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Log1p(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Log1ps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.floor_func">
            <summary>
            The floor function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Floor(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Floors the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.ceil_func">
            <summary>
            The ceil function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Ceil(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Ceils the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.round_func">
            <summary>
            The round function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Round(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Rounds the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.trunc_func">
            <summary>
            The trunc function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Trunc(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Truncs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.frac_func">
            <summary>
            The frac function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Frac(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Fracs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sin_func">
            <summary>
            The sin function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sin(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Sins the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.cos_func">
            <summary>
            The cos function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Cos(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Coses the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.tan_func">
            <summary>
            The tan function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Tan(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Tans the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.asin_func">
            <summary>
            The asin function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Asin(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Asins the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.acos_func">
            <summary>
            The acos function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Acos(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Acoses the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.atan_func">
            <summary>
            The atan function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Atan(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Atans the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sinh_func">
            <summary>
            The sinh function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sinh(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Sinhes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.cosh_func">
            <summary>
            The cosh function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Cosh(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Coshes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.tanh_func">
            <summary>
            The tanh function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Tanh(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Tanhes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sigmoid_func">
            <summary>
            [ERROR: invalid expression FieldName.Words.TheAndAllAsSentence]
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sigmoid(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Sigmoids the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.atan2_func">
            <summary>
            The atan2 function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Atan2(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Atan2s the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="srcY">The source y.</param>
            <param name="srcX">The source x.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.pow_func">
            <summary>
            The pow function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Pow(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Pows the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.tpow_func">
            <summary>
            The tpow function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Tpow(Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray)">
            <summary>
            Tpows the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.lerp_func">
            <summary>
            The lerp function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Lerp(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Lerps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="srcA">The source a.</param>
            <param name="srcB">The source b.</param>
            <param name="weight">The weight.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.clamp_func">
            <summary>
            The clamp function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Clamp(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single,System.Single)">
            <summary>
            Clamps the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.add_func">
            <summary>
            The add function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Add(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Adds the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sub_func">
            <summary>
            The sub function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sub(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Subs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.rsub_func">
            <summary>
            The rsub function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sub(Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray)">
            <summary>
            Subs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.mul_func">
            <summary>
            The mul function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Mul(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Muls the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.div_func">
            <summary>
            The div function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Div(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Divs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.rdiv_func">
            <summary>
            The rdiv function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Div(Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray)">
            <summary>
            Divs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.mod_func">
            <summary>
            The mod function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Mod(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Mods the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.gtValue_func">
            <summary>
            The gt value function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.GreaterThan(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Greaters the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.ltValue_func">
            <summary>
            The lt value function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.LessThan(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Lesses the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.geValue_func">
            <summary>
            The ge value function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.GreaterOrEqual(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Greaters the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.leValue_func">
            <summary>
            The le value function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.LessOrEqual(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Lesses the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.eqValue_func">
            <summary>
            The eq value function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.EqualTo(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Equals to.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.neValue_func">
            <summary>
            The ne value function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.NotEqual(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Nots the equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.cadd_func">
            <summary>
            The cadd function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Add(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Adds the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.csub_func">
            <summary>
            The csub function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sub(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Subs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.cmul_func">
            <summary>
            The cmul function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Mul(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Muls the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.cdiv_func">
            <summary>
            The cdiv function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Div(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Divs the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.cmod_func">
            <summary>
            The cmod function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Mod(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Mods the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.gtTensor_func">
            <summary>
            The gt Array function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.GreaterThan(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Greaters the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.ltTensor_func">
            <summary>
            The lt Array function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.LessThan(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Lesses the than.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.geTensor_func">
            <summary>
            The ge Array function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.GreaterOrEqual(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Greaters the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.leTensor_func">
            <summary>
            The le Array function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.LessOrEqual(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Lesses the or equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.eqTensor_func">
            <summary>
            The eq Array function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.EqualTo(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Equals to.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.neTensor_func">
            <summary>
            The ne Array function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.NotEqual(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Nots the equal.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sum_func">
            <summary>
            The sum function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Sum(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Sums the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.prod_func">
            <summary>
            The product function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Prod(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Products the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.min_func">
            <summary>
            The minimum function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Min(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.max_func">
            <summary>
            The maximum function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Max(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Determines the maximun of the parameters.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.argmin_func">
            <summary>
            The argmin function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Argmin(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Argmins the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.argmax_func">
            <summary>
            The argmax function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Argmax(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Argmaxes the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.mean_func">
            <summary>
            The mean function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Mean(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32)">
            <summary>
            Means the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.norm_func">
            <summary>
            The norm function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Norm(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32,System.Single)">
            <summary>
            Norms the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.std_func">
            <summary>
            The standard function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Std(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32,System.Boolean)">
            <summary>
            Standards the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="normByN">if set to <c>true</c> [norm by n].</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.var_func">
            <summary>
            The variable function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.Var(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32,System.Boolean)">
            <summary>
            Variables the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="normByN">if set to <c>true</c> [norm by n].</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.sumall_func">
            <summary>
            The sumall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.SumAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Sums all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.prodall_func">
            <summary>
            The prodall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.ProdAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Products all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.minall_func">
            <summary>
            The minall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.MinAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Minimums all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.maxall_func">
            <summary>
            The maxall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.MaxAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Maximums all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.meanall_func">
            <summary>
            The meanall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.MeanAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Means all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.varall_func">
            <summary>
            The varall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.VarAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Variables all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.stdall_func">
            <summary>
            The stdall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.StdAll(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Standards all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuBasicOps.normall_func">
            <summary>
            The normall function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuBasicOps.NormAll(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single)">
            <summary>
            Norms all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="T:Arithmetica.Cpu.CpuFillCopyOps">
            <summary>
            Class CpuFillCopyOps.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuFillCopyOps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Cpu.CpuFillCopyOps"/> class.
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuFillCopyOps.fill_func">
            <summary>
            The fill function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuFillCopyOps.Fill(Arithmetica.ArithArray,System.Single)">
            <summary>
            Fills the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuFillCopyOps.copy_func">
            <summary>
            The copy function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuFillCopyOps.Copy(Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Copies the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <exception cref="T:System.InvalidOperationException">Tensors must have equal numbers of elements</exception>
        </member>
        <member name="T:Arithmetica.Cpu.CpuIndexingOps">
            <summary>
            Class CpuIndexingOps.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuIndexingOps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Cpu.CpuIndexingOps"/> class.
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuIndexingOps.gather_func">
            <summary>
            The gather function
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuIndexingOps.scatter_func">
            <summary>
            The scatter function
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuIndexingOps.scatterFill_func">
            <summary>
            The scatter fill function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuIndexingOps.Gather(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Gathers the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">
            result and src must have same number of dimensions
            or
            src and indices must have same number of dimensions
            or
            result and indices must be the same size
            or
            result and src must be the same size except in dimension dim
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dim</exception>
        </member>
        <member name="M:Arithmetica.Cpu.CpuIndexingOps.Scatter(Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Scatters the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
            <exception cref="T:System.InvalidOperationException">
            result and src must have same number of dimensions
            or
            src and indices must have same number of dimensions
            or
            src and indices must be the same size
            or
            result and src must be the same size except in dimension dim
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dim</exception>
        </member>
        <member name="M:Arithmetica.Cpu.CpuIndexingOps.ScatterFill(Arithmetica.ArithArray,System.Single,System.Int32,Arithmetica.ArithArray)">
            <summary>
            Scatters the fill.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dim</exception>
            <exception cref="T:System.InvalidOperationException">
            result and indices must have same number of dimensions
            or
            result and indices must be the same size except in dimension dim
            </exception>
        </member>
        <member name="T:Arithmetica.Cpu.CpuNativeHelpers">
            <summary>
            Class CpuNativeHelpers.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuNativeHelpers.GetBufferStart(Arithmetica.ArithArray)">
            <summary>
            Gets the buffer start.
            </summary>
            <param name="Array">The Array.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuNativeHelpers.PtrAdd(System.IntPtr,System.Int64)">
            <summary>
            PTRs the add.
            </summary>
            <param name="ptr">The PTR.</param>
            <param name="offset">The offset.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="F:Arithmetica.Cpu.CpuDType.Float32">
            <summary>
            The float32
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuDType.Float16">
            <summary>
            The float16
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuDType.Float64">
            <summary>
            The float64
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuDType.Int32">
            <summary>
            The int32
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuDType.UInt8">
            <summary>
            The u int8
            </summary>
        </member>
        <member name="T:Arithmetica.Cpu.TensorRef64">
            <summary>
            Struct TensorRef64
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.TensorRef64.buffer">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.TensorRef64.sizes">
            <summary>
            The sizes
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.TensorRef64.strides">
            <summary>
            The strides
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.TensorRef64.dimCount">
            <summary>
            The dim count
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.TensorRef64.elementType">
            <summary>
            The element type
            </summary>
        </member>
        <member name="T:Arithmetica.Cpu.CpuOpsNative">
            <summary>
            Class CpuOpsNative.
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuOpsNative.dll">
            <summary>
            The DLL
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuOpsNative.cc">
            <summary>
            The cc
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_GetLastError">
            <summary>
            Tses the get last error.
            </summary>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Fill(System.IntPtr,System.Single)">
            <summary>
            Tses the fill.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Copy(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the copy.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Abs(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the abs.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Neg(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the neg.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sign(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the sign.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sqrt(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the SQRT.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Exp(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the exp.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Log(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the log.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Log1p(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the log1p.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Floor(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the floor.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Ceil(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the ceil.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Round(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the round.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Trunc(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the trunc.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Frac(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the frac.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sin(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the sin.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Cos(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the cos.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Tan(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the tan.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Asin(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the asin.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Acos(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the acos.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Atan(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the atan.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sinh(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the sinh.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Cosh(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the cosh.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Tanh(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the tanh.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sigmoid(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the sigmoid.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Atan2(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the atan2.
            </summary>
            <param name="result">The result.</param>
            <param name="srcY">The source y.</param>
            <param name="srcX">The source x.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Pow(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the pow.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Tpow(System.IntPtr,System.Single,System.IntPtr)">
            <summary>
            Tses the tpow.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Lerp(System.IntPtr,System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the lerp.
            </summary>
            <param name="result">The result.</param>
            <param name="srcA">The source a.</param>
            <param name="srcB">The source b.</param>
            <param name="weight">The weight.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Clamp(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>
            Tses the clamp.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Add(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the add.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sub(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the sub.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Rsub(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the rsub.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Mul(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the mul.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Div(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the div.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Rdiv(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the rdiv.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Mod(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the mod.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_gtValue(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the gt value.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_ltValue(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the lt value.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_geValue(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the ge value.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_leValue(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the le value.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_eqValue(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the eq value.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_neValue(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the ne value.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_CAdd(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the c add.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_CSub(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the c sub.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_CMul(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the c mul.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_CDiv(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the c div.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_CMod(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the c mod.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_gtTensor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the gt Array.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_ltTensor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the lt Array.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_geTensor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the ge Array.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_leTensor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the le Array.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_eqTensor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the eq Array.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_neTensor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Tses the ne Array.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Sum(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the sum.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Prod(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the product.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Min(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the minimum.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Max(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the maximum.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Argmin(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the argmin.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Argmax(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the argmax.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Mean(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Tses the mean.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Norm(System.IntPtr,System.IntPtr,System.Int32,System.Single)">
            <summary>
            Tses the norm.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Std(System.IntPtr,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Tses the standard.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="normByN">if set to <c>true</c> [norm by n].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Var(System.IntPtr,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Tses the variable.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="normByN">if set to <c>true</c> [norm by n].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_SumAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the sum all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_ProdAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the product all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_MinAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the minimum all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_MaxAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the maximum all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_MeanAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the mean all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_VarAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the variable all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_StdAll(System.IntPtr,System.IntPtr)">
            <summary>
            Tses the standard all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_NormAll(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the norm all.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_NewRNG(System.IntPtr@)">
            <summary>
            Tses the new RNG.
            </summary>
            <param name="rng">The RNG.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_DeleteRNG(System.IntPtr)">
            <summary>
            Tses the delete RNG.
            </summary>
            <param name="rng">The RNG.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_SetRNGSeed(System.IntPtr,System.Int32)">
            <summary>
            Tses the set RNG seed.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="newSeed">The new seed.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomUniform(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>
            Tses the random uniform.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomNormal(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>
            Tses the random normal.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="mean">The mean.</param>
            <param name="stdv">The STDV.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomExponential(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the random exponential.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="lambda">The lambda.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomCauchy(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>
            Tses the random cauchy.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="median">The median.</param>
            <param name="sigma">The sigma.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomLogNormal(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>
            Tses the random log normal.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="mean">The mean.</param>
            <param name="stdv">The STDV.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomGeometric(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the random geometric.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="p">The p.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_RandomBernoulli(System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            Tses the random bernoulli.
            </summary>
            <param name="rng">The RNG.</param>
            <param name="result">The result.</param>
            <param name="p">The p.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Unfolded_Acc(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tses the unfolded acc.
            </summary>
            <param name="finput">The finput.</param>
            <param name="input">The input.</param>
            <param name="kW">The k w.</param>
            <param name="kH">The k h.</param>
            <param name="dW">The d w.</param>
            <param name="dH">The d h.</param>
            <param name="padW">The pad w.</param>
            <param name="padH">The pad h.</param>
            <param name="nInputPlane">The n input plane.</param>
            <param name="inputWidth">Width of the input.</param>
            <param name="inputHeight">Height of the input.</param>
            <param name="outputWidth">Width of the output.</param>
            <param name="outputHeight">Height of the output.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Unfolded_Copy(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tses the unfolded copy.
            </summary>
            <param name="finput">The finput.</param>
            <param name="input">The input.</param>
            <param name="kW">The k w.</param>
            <param name="kH">The k h.</param>
            <param name="dW">The d w.</param>
            <param name="dH">The d h.</param>
            <param name="padW">The pad w.</param>
            <param name="padH">The pad h.</param>
            <param name="nInputPlane">The n input plane.</param>
            <param name="inputWidth">Width of the input.</param>
            <param name="inputHeight">Height of the input.</param>
            <param name="outputWidth">Width of the output.</param>
            <param name="outputHeight">Height of the output.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_SpatialMaxPooling_updateOutput_frame(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tses the spatial maximum pooling update output frame.
            </summary>
            <param name="input_p">The input p.</param>
            <param name="output_p">The output p.</param>
            <param name="ind_p">The ind p.</param>
            <param name="nslices">The nslices.</param>
            <param name="iwidth">The iwidth.</param>
            <param name="iheight">The iheight.</param>
            <param name="owidth">The owidth.</param>
            <param name="oheight">The oheight.</param>
            <param name="kW">The k w.</param>
            <param name="kH">The k h.</param>
            <param name="dW">The d w.</param>
            <param name="dH">The d h.</param>
            <param name="padW">The pad w.</param>
            <param name="padH">The pad h.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_SpatialMaxPooling_updateGradInput_frame(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Tses the spatial maximum pooling update grad input frame.
            </summary>
            <param name="gradInput">The grad input.</param>
            <param name="gradOutput">The grad output.</param>
            <param name="ind">The ind.</param>
            <param name="nslices">The nslices.</param>
            <param name="iwidth">The iwidth.</param>
            <param name="iheight">The iheight.</param>
            <param name="owidth">The owidth.</param>
            <param name="oheight">The oheight.</param>
            <param name="dW">The d w.</param>
            <param name="dH">The d h.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Gather(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Tses the gather.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_Scatter(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Tses the scatter.
            </summary>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuOpsNative.TS_ScatterFill(System.IntPtr,System.Single,System.Int32,System.IntPtr)">
            <summary>
            Tses the scatter fill.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <param name="dim">The dim.</param>
            <param name="indices">The indices.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Arithmetica.Cpu.CpuRandom">
            <summary>
            Class CpuRandom.
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.seedGen">
            <summary>
            The seed gen
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Cpu.CpuRandom"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.InvokeWithRng(System.Nullable{System.Int32},System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes the with RNG.
            </summary>
            <param name="seed">The seed.</param>
            <param name="method">The method.</param>
            <param name="allArgs">All arguments.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.uniform_func">
            <summary>
            The uniform function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.Uniform(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single,System.Single)">
            <summary>
            Uniforms the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.normal_func">
            <summary>
            The normal function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.Normal(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single,System.Single)">
            <summary>
            Normals the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="mean">The mean.</param>
            <param name="stdv">The STDV.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.exponential_func">
            <summary>
            The exponential function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.Exponential(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single)">
            <summary>
            Exponentials the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="lambda">The lambda.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.cauchy_func">
            <summary>
            The cauchy function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.Cauchy(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single,System.Single)">
            <summary>
            Cauchies the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="median">The median.</param>
            <param name="sigma">The sigma.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.log_normal_func">
            <summary>
            The log normal function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.LogNormal(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single,System.Single)">
            <summary>
            Logs the normal.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="mean">The mean.</param>
            <param name="stdv">The STDV.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.geometric_func">
            <summary>
            The geometric function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.Geometric(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single)">
            <summary>
            Geometrics the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="p">The p.</param>
        </member>
        <member name="F:Arithmetica.Cpu.CpuRandom.bernoulli_func">
            <summary>
            The bernoulli function
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuRandom.Bernoulli(Arithmetica.ArithArray,System.Nullable{System.Int32},System.Single)">
            <summary>
            Bernoullis the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="seed">The seed.</param>
            <param name="p">The p.</param>
        </member>
        <member name="T:Arithmetica.Cpu.CpuStorage">
            <summary>
            Class CpuStorage.
            Implements the <see cref="T:Arithmetica.Storage" />
            </summary>
            <seealso cref="T:Arithmetica.Storage" />
        </member>
        <member name="F:Arithmetica.Cpu.CpuStorage.buffer">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.#ctor(Arithmetica.IAllocator,Arithmetica.DType,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Cpu.CpuStorage"/> class.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="ElementType">Type of the element.</param>
            <param name="elementCount">The element count.</param>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.Destroy">
            <summary>
            This method is called when the reference count reaches zero. It will be called at most once to allow subclasses to release resources.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.LocationDescription">
            <summary>
            Locations the description.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.PtrAtElement(System.Int64)">
            <summary>
            PTRs at element.
            </summary>
            <param name="index">The index.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.GetElementAsFloat(System.Int64)">
            <summary>
            Gets the element as float.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Single.</returns>
            <exception cref="T:System.NotSupportedException">Element type " + ElementType + " not supported</exception>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.SetElementAsFloat(System.Int64,System.Single)">
            <summary>
            Sets the element as float.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException">Element type " + ElementType + " not supported</exception>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.CopyToStorage(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Copies to storage.
            </summary>
            <param name="storageIndex">Index of the storage.</param>
            <param name="src">The source.</param>
            <param name="byteCount">The byte count.</param>
        </member>
        <member name="M:Arithmetica.Cpu.CpuStorage.CopyFromStorage(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Copies from storage.
            </summary>
            <param name="dst">The DST.</param>
            <param name="storageIndex">Index of the storage.</param>
            <param name="byteCount">The byte count.</param>
        </member>
        <member name="T:Arithmetica.Cpu.BlasOp">
            <summary>
            Enum BlasOp
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.BlasOp.NonTranspose">
            <summary>
            The non IntTranspose
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.BlasOp.Transpose">
            <summary>
            The IntTranspose
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.BlasOp.ConjugateTranspose">
            <summary>
            The conjugate IntTranspose
            </summary>
        </member>
        <member name="T:Arithmetica.Cpu.MatrixMultiplication">
            <summary>
            Class MatrixMultiplication.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Dot(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Dots the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">All tensors must have the same element type</exception>
            <exception cref="T:System.ArgumentException">
            result must be a CPU array - result
            or
            lhs must be a CPU array - lhs
            or
            rhs must be a CPU array - rhs
            or
            lhs must have 1 dimension (ie. be a vector) - lhs
            or
            rhs must have 1 dimension (ie. be a vector) - rhs
            </exception>
            <exception cref="T:System.NotSupportedException">CPU vector dot product with element type " + result.ElementType + " not supported</exception>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Run_Dot_float(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Runs the dot float.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Run_Dot_double(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Runs the dot double.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Mul_M_V(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Muls the m v.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">All tensors must have the same element type</exception>
            <exception cref="T:System.ArgumentException">
            result must be a CPU array - result
            or
            lhs must be a CPU array - lhs
            or
            rhs must be a CPU array - rhs
            or
            lhs must have 2 dimensions - lhs
            or
            rhs must have 1 dimension (ie. be a vector) - rhs
            </exception>
            <exception cref="T:System.NotSupportedException">CPU Matrix-Vector multiplication with element type " + result.ElementType + " not supported</exception>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Run_M_V_float(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Runs the m v float.
            </summary>
            <param name="result">The result.</param>
            <param name="mat">The mat.</param>
            <param name="vec">The vec.</param>
            <exception cref="T:System.ArgumentException">lhs must be contiguous in the last dimension</exception>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Run_M_V_double(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Runs the m v double.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <exception cref="T:System.ArgumentException">lhs must be contiguous in the last dimension</exception>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Mul_M_M(Arithmetica.ArithArray,Arithmetica.ArithArray,Arithmetica.ArithArray)">
            <summary>
            Muls the m m.
            </summary>
            <param name="result">The result.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.InvalidOperationException">All tensors must have the same element type</exception>
            <exception cref="T:System.ArgumentException">
            result must be a CPU array - result
            or
            lhs must be a CPU array - lhs
            or
            rhs must be a CPU array - rhs
            </exception>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.Gemm(System.Single,Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray)">
            <summary>
            Gemms the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="beta">The beta.</param>
            <param name="c">The c.</param>
            <exception cref="T:System.InvalidOperationException">Size mismatch</exception>
        </member>
        <member name="M:Arithmetica.Cpu.MatrixMultiplication.GemmOp(Arithmetica.Cpu.BlasOp,Arithmetica.Cpu.BlasOp,System.Single,Arithmetica.ArithArray,Arithmetica.ArithArray,System.Single,Arithmetica.ArithArray)">
            <summary>
            Gemms the op.
            </summary>
            <param name="transA">The trans a.</param>
            <param name="transB">The trans b.</param>
            <param name="alpha">The alpha.</param>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="beta">The beta.</param>
            <param name="c">The c.</param>
            <exception cref="T:System.ArgumentException">
            a must be contiguous in the first dimension (column major / fortran order)
            or
            b must be contiguous in the first dimension (column major / fortran order)
            or
            c must be contiguous in the first dimension (column major / fortran order)
            </exception>
            <exception cref="T:System.NotSupportedException">CPU GEMM with element type " + c.ElementType + " not supported</exception>
        </member>
        <member name="T:Arithmetica.Cpu.NativeWrapper">
            <summary>
            Class NativeWrapper.
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.GetMethod(System.String)">
            <summary>
            Gets the method.
            </summary>
            <param name="name">The name.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.InvokeNullableResultElementwise(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes the nullable result elementwise.
            </summary>
            <param name="method">The method.</param>
            <param name="args">The arguments.</param>
            <returns>ArithArray.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.InvokeNullableResultDimensionwise(System.Reflection.MethodInfo,Arithmetica.ArithArray,Arithmetica.ArithArray,System.Int32,System.Object[])">
            <summary>
            Invokes the nullable result dimensionwise.
            </summary>
            <param name="method">The method.</param>
            <param name="result">The result.</param>
            <param name="src">The source.</param>
            <param name="dimension">The dimension.</param>
            <param name="extraArgs">The extra arguments.</param>
            <returns>ArithArray.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">dimension</exception>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.InvokeTypeMatch(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes the type match.
            </summary>
            <param name="method">The method.</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.InvalidOperationException">All tensors must have the same argument types. Given: " + allTypes</exception>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.BuildTensorRefPtr(Arithmetica.ArithArray,System.IntPtr@)">
            <summary>
            Builds the Array reference PTR.
            </summary>
            <param name="Array">The Array.</param>
            <param name="tensorRefPtr">The Array reference PTR.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.InvalidOperationException">Argument " + i + " is not a Cpu Array</exception>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.CheckResult(System.Int32)">
            <summary>
            Checks the result.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.GetLastError">
            <summary>
            Gets the last error.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.AllocTensorRef(Arithmetica.ArithArray)">
            <summary>
            Allocs the Array reference.
            </summary>
            <param name="Array">The Array.</param>
            <returns>TensorRef64.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.AllocArray(System.Int64[])">
            <summary>
            Allocs the array.
            </summary>
            <param name="data">The data.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.NativeWrapper.FreeTensorRef(Arithmetica.Cpu.TensorRef64)">
            <summary>
            Frees the Array reference.
            </summary>
            <param name="tensorRef">The Array reference.</param>
        </member>
        <member name="T:Arithmetica.Cpu.OpenBlasNative">
            <summary>
            Class OpenBlasNative.
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.OpenBlasNative.dll">
            <summary>
            The DLL
            </summary>
        </member>
        <member name="F:Arithmetica.Cpu.OpenBlasNative.cc">
            <summary>
            The cc
            </summary>
        </member>
        <member name="M:Arithmetica.Cpu.OpenBlasNative.sgemm_(System.Byte*,System.Byte*,System.Int32*,System.Int32*,System.Int32*,System.Single*,System.Single*,System.Int32*,System.Single*,System.Int32*,System.Single*,System.Single*,System.Int32*)">
            <summary>
            Sgemms the specified transa.
            </summary>
            <param name="transa">The transa.</param>
            <param name="transb">The transb.</param>
            <param name="m">The m.</param>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <param name="alpha">The alpha.</param>
            <param name="a">a.</param>
            <param name="lda">The lda.</param>
            <param name="b">The b.</param>
            <param name="ldb">The LDB.</param>
            <param name="beta">The beta.</param>
            <param name="c">The c.</param>
            <param name="ldc">The LDC.</param>
        </member>
        <member name="M:Arithmetica.Cpu.OpenBlasNative.dgemm_(System.Byte*,System.Byte*,System.Int32*,System.Int32*,System.Int32*,System.Double*,System.Double*,System.Int32*,System.Double*,System.Int32*,System.Double*,System.Double*,System.Int32*)">
            <summary>
            Dgemms the specified transa.
            </summary>
            <param name="transa">The transa.</param>
            <param name="transb">The transb.</param>
            <param name="m">The m.</param>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <param name="alpha">The alpha.</param>
            <param name="a">a.</param>
            <param name="lda">The lda.</param>
            <param name="b">The b.</param>
            <param name="ldb">The LDB.</param>
            <param name="beta">The beta.</param>
            <param name="c">The c.</param>
            <param name="ldc">The LDC.</param>
        </member>
        <member name="M:Arithmetica.Cpu.OpenBlasNative.sgemv_(System.Byte*,System.Int32*,System.Int32*,System.Single*,System.Single*,System.Int32*,System.Single*,System.Int32*,System.Single*,System.Single*,System.Int32*)">
            <summary>
            Sgemvs the specified trans.
            </summary>
            <param name="trans">The trans.</param>
            <param name="m">The m.</param>
            <param name="n">The n.</param>
            <param name="alpha">The alpha.</param>
            <param name="a">a.</param>
            <param name="lda">The lda.</param>
            <param name="x">The x.</param>
            <param name="incx">The incx.</param>
            <param name="beta">The beta.</param>
            <param name="y">The y.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Arithmetica.Cpu.OpenBlasNative.dgemv_(System.Byte*,System.Int32*,System.Int32*,System.Double*,System.Double*,System.Int32*,System.Double*,System.Int32*,System.Double*,System.Double*,System.Int32*)">
            <summary>
            Dgemvs the specified trans.
            </summary>
            <param name="trans">The trans.</param>
            <param name="m">The m.</param>
            <param name="n">The n.</param>
            <param name="alpha">The alpha.</param>
            <param name="a">a.</param>
            <param name="lda">The lda.</param>
            <param name="x">The x.</param>
            <param name="incx">The incx.</param>
            <param name="beta">The beta.</param>
            <param name="y">The y.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Arithmetica.Cpu.OpenBlasNative.sdot_(System.Int32*,System.Single*,System.Int32*,System.Single*,System.Int32*)">
            <summary>
            Sdots the specified n.
            </summary>
            <param name="n">The n.</param>
            <param name="x">The x.</param>
            <param name="incx">The incx.</param>
            <param name="y">The y.</param>
            <param name="incy">The incy.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.Cpu.OpenBlasNative.ddot_(System.Int32*,System.Double*,System.Int32*,System.Double*,System.Int32*)">
            <summary>
            Ddots the specified n.
            </summary>
            <param name="n">The n.</param>
            <param name="x">The x.</param>
            <param name="incx">The incx.</param>
            <param name="y">The y.</param>
            <param name="incy">The incy.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:Arithmetica.DType">
            <summary>
            Enum DType
            </summary>
        </member>
        <member name="F:Arithmetica.DType.Float32">
            <summary>
            The float32
            </summary>
        </member>
        <member name="F:Arithmetica.DType.Float16">
            <summary>
            The float16
            </summary>
        </member>
        <member name="F:Arithmetica.DType.Float64">
            <summary>
            The float64
            </summary>
        </member>
        <member name="F:Arithmetica.DType.Int32">
            <summary>
            The int32
            </summary>
        </member>
        <member name="F:Arithmetica.DType.UInt8">
            <summary>
            The u int8
            </summary>
        </member>
        <member name="T:Arithmetica.Half">
            <summary>
            Struct Half
            </summary>
        </member>
        <member name="F:Arithmetica.Half.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:Arithmetica.DTypeExtensions">
            <summary>
            Class DTypeExtensions.
            </summary>
        </member>
        <member name="M:Arithmetica.DTypeExtensions.Size(Arithmetica.DType)">
            <summary>
            Sizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotSupportedException">Element type " + value + " not supported.</exception>
        </member>
        <member name="M:Arithmetica.DTypeExtensions.ToCLRType(Arithmetica.DType)">
            <summary>
            Converts to clrtype.
            </summary>
            <param name="value">The value.</param>
            <returns>Type.</returns>
            <exception cref="T:System.NotSupportedException">Element type " + value + " not supported.</exception>
        </member>
        <member name="T:Arithmetica.DTypeBuilder">
            <summary>
            Class DTypeBuilder.
            </summary>
        </member>
        <member name="M:Arithmetica.DTypeBuilder.FromCLRType(System.Type)">
            <summary>
            Froms the type of the color.
            </summary>
            <param name="type">The type.</param>
            <returns>DType.</returns>
            <exception cref="T:System.NotSupportedException">No corresponding DType value for CLR type " + type</exception>
        </member>
        <member name="T:Arithmetica.IAllocator">
            <summary>
            Interface IAllocator
            </summary>
        </member>
        <member name="M:Arithmetica.IAllocator.Allocate(Arithmetica.DType,System.Int64)">
            <summary>
            Allocates the specified element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elementCount">The element count.</param>
            <returns>Storage.</returns>
        </member>
        <member name="M:Arithmetica.Matrix.Dot(Arithmetica.Matrix,Arithmetica.Matrix)">
            <summary>
            Performs the dot product between 2 matrix.
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The second matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Addmm(System.Single,Arithmetica.Matrix,System.Single,Arithmetica.Matrix,Arithmetica.Matrix)">
            <summary>The addmm function is an optimized version of the equation beta*mat + alpha*(mat1 @ mat2)</summary>
            <param name="beta">The beta value.</param>
            <param name="src">The source matrix.</param>
            <param name="alpha">The alpha value.</param>
            <param name="m1">The first 2D matrix.</param>
            <param name="m2">The second 2D matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Add(Arithmetica.Matrix,Arithmetica.Matrix)">
            <summary>
            Performs elementwise add operation between two matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The second matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Add(Arithmetica.Matrix,System.Single)">
            <summary>
            Performs elementwise add operation between matrix and scalar
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Add(System.Single,Arithmetica.Matrix)">
            <summary>
            Performs elementwise add operation between scalar and matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Sub(Arithmetica.Matrix,Arithmetica.Matrix)">
            <summary>
            Performs elementwise subtract operation between two matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The second matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Sub(Arithmetica.Matrix,System.Single)">
            <summary>
            Performs elementwise subtract operation between scalar and matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Sub(System.Single,Arithmetica.Matrix)">
            <summary>
            Performs elementwise multiplication operation between two matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The second matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Mul(Arithmetica.Matrix,Arithmetica.Matrix)">
            <summary>
            Performs elementwise multiplication operation between matrix and scalar
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Mul(Arithmetica.Matrix,System.Single)">
            <summary>
            Performs elementwise multiplication operation between matrix and scalar
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Mul(System.Single,Arithmetica.Matrix)">
            <summary>
            Performs elementwise multiplication operation between scalar and matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Div(Arithmetica.Matrix,Arithmetica.Matrix)">
            <summary>
            Performs elementwise divide operation between two matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The second matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Div(Arithmetica.Matrix,System.Single)">
            <summary>
            Performs elementwise divide operation between matrix and scalar
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Div(System.Single,Arithmetica.Matrix)">
            <summary>
            Performs elementwise divide operation between scalar and matrix
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Mod(Arithmetica.Matrix,System.Single)">
            <summary>
            Performs elementwise divide modulus for the first matrix against a scalar value
            </summary>
            <param name="lhs">The first matrix.</param>
            <param name="rhs">The scalar value.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Neg(Arithmetica.Matrix)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="src">The source matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Arithmetica.Matrix.Abs(Arithmetica.Matrix)">
            <summary>
            Finds the elementwise absolute value of the matrix
            </summary>
            <param name="src">The source matrix.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Arithmetica.Matrix.Sign(Arithmetica.Matrix)" -->
        <member name="M:Arithmetica.Matrix.Lerp(Arithmetica.Matrix,Arithmetica.Matrix,System.Single)">
            <summary>
            Finds the linear interpolation is a method of curve fitting using linear polynomials to construct new data points within the range of a discrete set of known data points.
            </summary>
            <param name="a">The first matrix</param>
            <param name="b">The second matrix.</param>
            <param name="weight">The weight.</param>
            <returns></returns>
        </member>
        <member name="T:Arithmetica.OpConstraint">
            <summary>
            Class OpConstraint.
            </summary>
        </member>
        <member name="M:Arithmetica.OpConstraint.SatisfiedFor(System.Object[])">
            <summary>
            Satisfieds for.
            </summary>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Arithmetica.ArgCountConstraint">
            <summary>
            Class ArgCountConstraint.
            Implements the <see cref="T:Arithmetica.OpConstraint" />
            </summary>
            <seealso cref="T:Arithmetica.OpConstraint" />
        </member>
        <member name="F:Arithmetica.ArgCountConstraint.argCount">
            <summary>
            The argument count
            </summary>
        </member>
        <member name="M:Arithmetica.ArgCountConstraint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArgCountConstraint"/> class.
            </summary>
            <param name="argCount">The argument count.</param>
        </member>
        <member name="M:Arithmetica.ArgCountConstraint.SatisfiedFor(System.Object[])">
            <summary>
            Satisfieds for.
            </summary>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Arithmetica.ArgTypeConstraint">
            <summary>
            Class ArgTypeConstraint.
            Implements the <see cref="T:Arithmetica.OpConstraint" />
            </summary>
            <seealso cref="T:Arithmetica.OpConstraint" />
        </member>
        <member name="F:Arithmetica.ArgTypeConstraint.argIndex">
            <summary>
            The argument index
            </summary>
        </member>
        <member name="F:Arithmetica.ArgTypeConstraint.requiredType">
            <summary>
            The required type
            </summary>
        </member>
        <member name="M:Arithmetica.ArgTypeConstraint.#ctor(System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArgTypeConstraint"/> class.
            </summary>
            <param name="argIndex">Index of the argument.</param>
            <param name="requiredType">Type of the required.</param>
        </member>
        <member name="M:Arithmetica.ArgTypeConstraint.SatisfiedFor(System.Object[])">
            <summary>
            Satisfieds for.
            </summary>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Arithmetica.ArgStorageTypeConstraint">
            <summary>
            Class ArgStorageTypeConstraint.
            Implements the <see cref="T:Arithmetica.OpConstraint" />
            </summary>
            <seealso cref="T:Arithmetica.OpConstraint" />
        </member>
        <member name="F:Arithmetica.ArgStorageTypeConstraint.argIndex">
            <summary>
            The argument index
            </summary>
        </member>
        <member name="F:Arithmetica.ArgStorageTypeConstraint.requiredType">
            <summary>
            The required type
            </summary>
        </member>
        <member name="F:Arithmetica.ArgStorageTypeConstraint.allowNull">
            <summary>
            The allow null
            </summary>
        </member>
        <member name="M:Arithmetica.ArgStorageTypeConstraint.#ctor(System.Int32,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArgStorageTypeConstraint"/> class.
            </summary>
            <param name="argIndex">Index of the argument.</param>
            <param name="requiredType">Type of the required.</param>
            <param name="allowNull">if set to <c>true</c> [allow null].</param>
        </member>
        <member name="M:Arithmetica.ArgStorageTypeConstraint.SatisfiedFor(System.Object[])">
            <summary>
            Satisfieds for.
            </summary>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Arithmetica.OpHandler">
            <summary>
            Delegate OpHandler
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Arithmetica.OpRegistry">
            <summary>
            Class OpRegistry.
            </summary>
        </member>
        <member name="T:Arithmetica.OpRegistry.OpInstance">
            <summary>
            Class OpInstance.
            </summary>
        </member>
        <member name="F:Arithmetica.OpRegistry.OpInstance.handler">
            <summary>
            The handler
            </summary>
        </member>
        <member name="F:Arithmetica.OpRegistry.OpInstance.constraints">
            <summary>
            The constraints
            </summary>
        </member>
        <member name="F:Arithmetica.OpRegistry.opInstances">
            <summary>
            The op instances
            </summary>
        </member>
        <member name="F:Arithmetica.OpRegistry.registeredAssemblies">
            <summary>
            The registered assemblies
            </summary>
        </member>
        <member name="M:Arithmetica.OpRegistry.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Arithmetica.OpRegistry"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.OpRegistry.Register(System.String,Arithmetica.OpHandler,System.Collections.Generic.IEnumerable{Arithmetica.OpConstraint})">
            <summary>
            Registers the specified op name.
            </summary>
            <param name="opName">Name of the op.</param>
            <param name="handler">The handler.</param>
            <param name="constraints">The constraints.</param>
        </member>
        <member name="M:Arithmetica.OpRegistry.Invoke(System.String,System.Object[])">
            <summary>
            Invokes the specified op name.
            </summary>
            <param name="opName">Name of the op.</param>
            <param name="args">The arguments.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ApplicationException">
            None of the registered handlers match the arguments for " + opName
            or
            No handlers have been registered for op " + opName
            </exception>
        </member>
        <member name="M:Arithmetica.OpRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Arithmetica.OpRegistry.GetParameterConstraints(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Gets the parameter constraints.
            </summary>
            <param name="method">The method.</param>
            <param name="instance">The instance.</param>
            <returns>IEnumerable&lt;OpConstraint&gt;.</returns>
        </member>
        <member name="T:Arithmetica.OpsClassAttribute">
            <summary>
            Class OpsClassAttribute.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Arithmetica.RegisterOp">
            <summary>
            Class RegisterOp.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Arithmetica.RegisterOp.OpName">
            <summary>
            Gets the name of the op.
            </summary>
            <value>The name of the op.</value>
        </member>
        <member name="M:Arithmetica.RegisterOp.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.RegisterOp"/> class.
            </summary>
            <param name="opName">Name of the op.</param>
        </member>
        <member name="M:Arithmetica.RegisterOp.DoRegister(System.Object,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Arithmetica.OpConstraint})">
            <summary>
            Does the register.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The method.</param>
            <param name="paramConstraints">The parameter constraints.</param>
        </member>
        <member name="T:Arithmetica.RegisterOpArgCount">
            <summary>
            Register a method where the only constraint is that the argument counts match.
            Implements the <see cref="T:Arithmetica.RegisterOp" />
            </summary>
            <seealso cref="T:Arithmetica.RegisterOp" />
        </member>
        <member name="M:Arithmetica.RegisterOpArgCount.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.RegisterOpArgCount"/> class.
            </summary>
            <param name="opName">Name of the op.</param>
        </member>
        <member name="M:Arithmetica.RegisterOpArgCount.DoRegister(System.Object,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Arithmetica.OpConstraint})">
            <summary>
            Does the register.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The method.</param>
            <param name="paramConstraints">The parameter constraints.</param>
        </member>
        <member name="T:Arithmetica.RegisterOpStorageType">
            <summary>
            Class RegisterOpStorageType.
            Implements the <see cref="T:Arithmetica.RegisterOp" />
            </summary>
            <seealso cref="T:Arithmetica.RegisterOp" />
        </member>
        <member name="F:Arithmetica.RegisterOpStorageType.storageType">
            <summary>
            The storage type
            </summary>
        </member>
        <member name="M:Arithmetica.RegisterOpStorageType.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.RegisterOpStorageType"/> class.
            </summary>
            <param name="opName">Name of the op.</param>
            <param name="storageType">Type of the storage.</param>
        </member>
        <member name="M:Arithmetica.RegisterOpStorageType.DoRegister(System.Object,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Arithmetica.OpConstraint})">
            <summary>
            Does the register.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The method.</param>
            <param name="paramConstraints">The parameter constraints.</param>
        </member>
        <member name="T:Arithmetica.ArgConstraintAttribute">
            <summary>
            Class ArgConstraintAttribute.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Arithmetica.ArgConstraintAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.ArgConstraintAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.ArgConstraintAttribute.GetConstraints(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Gets the constraints.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="instance">The instance.</param>
            <returns>IEnumerable&lt;OpConstraint&gt;.</returns>
        </member>
        <member name="T:Arithmetica.OpArgStorageType">
            <summary>
            Class OpArgStorageType.
            Implements the <see cref="T:Arithmetica.ArgConstraintAttribute" />
            </summary>
            <seealso cref="T:Arithmetica.ArgConstraintAttribute" />
        </member>
        <member name="F:Arithmetica.OpArgStorageType.storageType">
            <summary>
            The storage type
            </summary>
        </member>
        <member name="M:Arithmetica.OpArgStorageType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.OpArgStorageType"/> class.
            </summary>
            <param name="storageType">Type of the storage.</param>
        </member>
        <member name="M:Arithmetica.OpArgStorageType.GetConstraints(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Gets the constraints.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="instance">The instance.</param>
            <returns>IEnumerable&lt;OpConstraint&gt;.</returns>
        </member>
        <member name="T:Arithmetica.RefCounted">
            <summary>
            Provides a thread safe reference counting implementation. Inheritors need only implement the Destroy() method,
            which will be called when the reference count reaches zero. The reference count automatically starts at 1.
            </summary>
        </member>
        <member name="F:Arithmetica.RefCounted.refCount">
            <summary>
            The reference count
            </summary>
        </member>
        <member name="M:Arithmetica.RefCounted.#ctor">
            <summary>
            Construct a new reference counted object. The reference count automatically starts at 1.
            </summary>
        </member>
        <member name="M:Arithmetica.RefCounted.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Arithmetica.RefCounted"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.RefCounted.Destroy">
            <summary>
            This method is called when the reference count reaches zero. It will be called at most once to allow subclasses to release resources.
            </summary>
        </member>
        <member name="M:Arithmetica.RefCounted.IsDestroyed">
            <summary>
            Returns true if the object has already been destroyed; false otherwise.
            </summary>
            <returns>true if the object is destroyed; false otherwise.</returns>
        </member>
        <member name="M:Arithmetica.RefCounted.ThrowIfDestroyed">
            <summary>
            Throws an exception if the object has been destroyed, otherwise does nothing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Reference counted object has been destroyed</exception>
        </member>
        <member name="M:Arithmetica.RefCounted.GetCurrentRefCount">
            <summary>
            Gets the current reference count.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Arithmetica.RefCounted.AddRef">
            <summary>
            Increments the reference count. If the object has previously been destroyed, an exception is thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot AddRef - object has already been destroyed</exception>
        </member>
        <member name="M:Arithmetica.RefCounted.Release">
            <summary>
            Decrements the reference count. If the reference count reaches zero, the object is destroyed.
            If the object has previously been destroyed, an exception is thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot release object - object has already been destroyed</exception>
        </member>
        <member name="T:Arithmetica.AssemblyExtensions">
            <summary>
            Class AssemblyExtensions.
            </summary>
        </member>
        <member name="M:Arithmetica.AssemblyExtensions.TypesWithAttribute``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Typeses the with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly">The assembly.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>IEnumerable&lt;Tuple&lt;Type, IEnumerable&lt;T&gt;&gt;&gt;.</returns>
        </member>
        <member name="T:Arithmetica.TypeExtensions">
            <summary>
            Class TypeExtensions.
            </summary>
        </member>
        <member name="M:Arithmetica.TypeExtensions.MethodsWithAttribute``1(System.Type,System.Boolean)">
            <summary>
            Methodses the with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>IEnumerable&lt;Tuple&lt;MethodInfo, IEnumerable&lt;T&gt;&gt;&gt;.</returns>
        </member>
        <member name="T:Arithmetica.MethodExtensions">
            <summary>
            Class MethodExtensions.
            </summary>
        </member>
        <member name="M:Arithmetica.MethodExtensions.ParametersWithAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Parameterses the with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">The method.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>IEnumerable&lt;Tuple&lt;ParameterInfo, IEnumerable&lt;T&gt;&gt;&gt;.</returns>
        </member>
        <member name="T:Arithmetica.SeedSource">
            <summary>
            Class SeedSource.
            </summary>
        </member>
        <member name="F:Arithmetica.SeedSource.rng">
            <summary>
            The RNG
            </summary>
        </member>
        <member name="M:Arithmetica.SeedSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.SeedSource"/> class.
            </summary>
        </member>
        <member name="M:Arithmetica.SeedSource.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.SeedSource"/> class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Arithmetica.SeedSource.SetSeed(System.Int32)">
            <summary>
            Sets the seed.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Arithmetica.SeedSource.NextSeed">
            <summary>
            Nexts the seed.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Arithmetica.Storage">
            <summary>
            Class Storage.
            Implements the <see cref="T:Arithmetica.RefCounted" />
            </summary>
            <seealso cref="T:Arithmetica.RefCounted" />
        </member>
        <member name="M:Arithmetica.Storage.#ctor(Arithmetica.IAllocator,Arithmetica.DType,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.Storage"/> class.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="elementType">Type of the element.</param>
            <param name="elementCount">The element count.</param>
        </member>
        <member name="P:Arithmetica.Storage.Allocator">
            <summary>
            Gets a reference to the allocator that constructed this Storage object.
            </summary>
            <value>The allocator.</value>
        </member>
        <member name="P:Arithmetica.Storage.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Arithmetica.Storage.ElementCount">
            <summary>
            Gets the element count.
            </summary>
            <value>The element count.</value>
        </member>
        <member name="P:Arithmetica.Storage.ByteLength">
            <summary>
            Gets the length of the byte.
            </summary>
            <value>The length of the byte.</value>
        </member>
        <member name="M:Arithmetica.Storage.IsOwnerExclusive">
            <summary>
            Determines whether [is owner exclusive].
            </summary>
            <returns><c>true</c> if [is owner exclusive]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Arithmetica.Storage.LocationDescription">
            <summary>
            Locations the description.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Arithmetica.Storage.GetElementAsFloat(System.Int64)">
            <summary>
            Gets the element as float.
            </summary>
            <param name="index">The index.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Arithmetica.Storage.SetElementAsFloat(System.Int64,System.Single)">
            <summary>
            Sets the element as float.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Arithmetica.Storage.CopyToStorage(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Copies to storage.
            </summary>
            <param name="storageIndex">Index of the storage.</param>
            <param name="src">The source.</param>
            <param name="byteCount">The byte count.</param>
        </member>
        <member name="M:Arithmetica.Storage.CopyFromStorage(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Copies from storage.
            </summary>
            <param name="dst">The DST.</param>
            <param name="storageIndex">Index of the storage.</param>
            <param name="byteCount">The byte count.</param>
        </member>
        <member name="T:Arithmetica.CUDA.Util.PooledObject`1">
            <summary>
            Class PooledObject.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Arithmetica.CUDA.Util.PooledObject`1.onDispose">
            <summary>
            The on dispose
            </summary>
        </member>
        <member name="F:Arithmetica.CUDA.Util.PooledObject`1.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:Arithmetica.CUDA.Util.PooledObject`1.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:Arithmetica.CUDA.Util.PooledObject`1.#ctor(`0,System.Action{Arithmetica.CUDA.Util.PooledObject{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.CUDA.Util.PooledObject`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="onDispose">The on dispose.</param>
            <exception cref="T:System.ArgumentNullException">onDispose</exception>
        </member>
        <member name="P:Arithmetica.CUDA.Util.PooledObject`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Arithmetica.CUDA.Util.PooledObject`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:Arithmetica.CUDA.Util.ObjectPool`1">
            <summary>
            Class ObjectPool.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Arithmetica.CUDA.Util.ObjectPool`1.constructor">
            <summary>
            The constructor
            </summary>
        </member>
        <member name="F:Arithmetica.CUDA.Util.ObjectPool`1.destructor">
            <summary>
            The destructor
            </summary>
        </member>
        <member name="F:Arithmetica.CUDA.Util.ObjectPool`1.freeList">
            <summary>
            The free list
            </summary>
        </member>
        <member name="F:Arithmetica.CUDA.Util.ObjectPool`1.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:Arithmetica.CUDA.Util.ObjectPool`1.#ctor(System.Int32,System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Arithmetica.CUDA.Util.ObjectPool`1"/> class.
            </summary>
            <param name="initialSize">The initial size.</param>
            <param name="constructor">The constructor.</param>
            <param name="destructor">The destructor.</param>
            <exception cref="T:System.ArgumentNullException">
            constructor
            or
            destructor
            </exception>
        </member>
        <member name="M:Arithmetica.CUDA.Util.ObjectPool`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Arithmetica.CUDA.Util.ObjectPool`1.Get">
            <summary>
            Gets this instance.
            </summary>
            <returns>PooledObject&lt;T&gt;.</returns>
        </member>
        <member name="M:Arithmetica.CUDA.Util.ObjectPool`1.Release(Arithmetica.CUDA.Util.PooledObject{`0})">
            <summary>
            Releases the specified handle.
            </summary>
            <param name="handle">The handle.</param>
        </member>
    </members>
</doc>
